// Code generated by goctl. DO NOT EDIT!

package bikeModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bikeFieldNames          = builder.RawFieldNames(&Bike{})
	bikeRows                = strings.Join(bikeFieldNames, ",")
	bikeRowsExpectAutoSet   = strings.Join(stringx.Remove(bikeFieldNames, "`id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), ",")
	bikeRowsWithPlaceHolder = strings.Join(stringx.Remove(bikeFieldNames, "`id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), "=?,") + "=?"

	cacheBsmasterBikeIdPrefix     = "cache:bsmaster:bike:id:"
	cacheBsmasterBikeBikeIdPrefix = "cache:bsmaster:bike:bikeId:"
)

type (
	bikeModel interface {
		Insert(ctx context.Context, data *Bike) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Bike, error)
		FindOneByBikeId(ctx context.Context, bikeId sql.NullInt64) (*Bike, error)
		Update(ctx context.Context, data *Bike) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBikeModel struct {
		sqlc.CachedConn
		table string
	}

	Bike struct {
		Id       int64         `db:"id"`
		BikeId   sql.NullInt64 `db:"bike_id"`
		BikeName string        `db:"bike_name"`
	}
)

func newBikeModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBikeModel {
	return &defaultBikeModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`bike`",
	}
}

func (m *defaultBikeModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	bsmasterBikeBikeIdKey := fmt.Sprintf("%s%v", cacheBsmasterBikeBikeIdPrefix, data.BikeId)
	bsmasterBikeIdKey := fmt.Sprintf("%s%v", cacheBsmasterBikeIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, bsmasterBikeBikeIdKey, bsmasterBikeIdKey)
	return err
}

func (m *defaultBikeModel) FindOne(ctx context.Context, id int64) (*Bike, error) {
	bsmasterBikeIdKey := fmt.Sprintf("%s%v", cacheBsmasterBikeIdPrefix, id)
	var resp Bike
	err := m.QueryRowCtx(ctx, &resp, bsmasterBikeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bikeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBikeModel) FindOneByBikeId(ctx context.Context, bikeId sql.NullInt64) (*Bike, error) {
	bsmasterBikeBikeIdKey := fmt.Sprintf("%s%v", cacheBsmasterBikeBikeIdPrefix, bikeId)
	var resp Bike
	err := m.QueryRowIndexCtx(ctx, &resp, bsmasterBikeBikeIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `bike_id` = ? limit 1", bikeRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, bikeId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBikeModel) Insert(ctx context.Context, data *Bike) (sql.Result, error) {
	bsmasterBikeBikeIdKey := fmt.Sprintf("%s%v", cacheBsmasterBikeBikeIdPrefix, data.BikeId)
	bsmasterBikeIdKey := fmt.Sprintf("%s%v", cacheBsmasterBikeIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, bikeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.BikeId, data.BikeName)
	}, bsmasterBikeBikeIdKey, bsmasterBikeIdKey)
	return ret, err
}

func (m *defaultBikeModel) Update(ctx context.Context, newData *Bike) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	bsmasterBikeBikeIdKey := fmt.Sprintf("%s%v", cacheBsmasterBikeBikeIdPrefix, data.BikeId)
	bsmasterBikeIdKey := fmt.Sprintf("%s%v", cacheBsmasterBikeIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bikeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.BikeId, newData.BikeName, newData.Id)
	}, bsmasterBikeBikeIdKey, bsmasterBikeIdKey)
	return err
}

func (m *defaultBikeModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBsmasterBikeIdPrefix, primary)
}

func (m *defaultBikeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bikeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBikeModel) tableName() string {
	return m.table
}

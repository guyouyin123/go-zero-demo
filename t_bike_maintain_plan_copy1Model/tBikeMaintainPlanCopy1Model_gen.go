// Code generated by goctl. DO NOT EDIT!

package t_bike_maintain_plan_copy1Model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tBikeMaintainPlanCopy1FieldNames          = builder.RawFieldNames(&TBikeMaintainPlanCopy1{}, true)
	tBikeMaintainPlanCopy1Rows                = strings.Join(tBikeMaintainPlanCopy1FieldNames, ",")
	tBikeMaintainPlanCopy1RowsExpectAutoSet   = strings.Join(stringx.Remove(tBikeMaintainPlanCopy1FieldNames), ",")
	tBikeMaintainPlanCopy1RowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(tBikeMaintainPlanCopy1FieldNames, "plan_id"))
)

type (
	tBikeMaintainPlanCopy1Model interface {
		Insert(ctx context.Context, data *TBikeMaintainPlanCopy1) (sql.Result, error)
		FindOne(ctx context.Context, planId int64) (*TBikeMaintainPlanCopy1, error)
		Update(ctx context.Context, data *TBikeMaintainPlanCopy1) error
		Delete(ctx context.Context, planId int64) error
	}

	defaultTBikeMaintainPlanCopy1Model struct {
		conn  sqlx.SqlConn
		table string
	}

	TBikeMaintainPlanCopy1 struct {
		PlanId                    int64          `db:"plan_id"`                      // 保养计划ID
		BikeId                    int64          `db:"bike_id"`                      // 车辆ID
		PlanRound                 sql.NullInt64  `db:"plan_round"`                   // 保养轮次
		PlanMaintainMileages      sql.NullInt64  `db:"plan_maintain_mileages"`       // 计划清除保养时车子的公里数（单位km）
		PlanMaintainTime          sql.NullInt64  `db:"plan_maintain_time"`           // 计划清除保养时间节点
		PlanMaintainCleanStatus   int64          `db:"plan_maintain_clean_status"`   // 本轮保养是否清除: 1:未清除保养,2:已清除保养
		AppNearNoticeIs           sql.NullInt64  `db:"app_near_notice_is"`           // APP端临近保养提醒信息是否提醒  1：已提醒，2：未提醒。仅做提醒，不存在清除概念，只提醒一次（下次满足临近提醒条件，如果是1就不再提醒了）
		AppNearNoticeTime         sql.NullInt64  `db:"app_near_notice_time"`         // APP端临近保养提醒信息成功提醒时间
		DeviceJustIsnotice        sql.NullInt64  `db:"device_just_isnotice"`         // 车机端立即保养提醒信息是否提醒:  1：已提醒，2：未提醒。未清除提醒之前，每次计算满足提醒条件，一直提醒，除非是1且清除了，就不再提醒了）
		DeviceJustNoticeTime      sql.NullInt64  `db:"device_just_notice_time"`      // 车机端立即保养提醒信息成功提醒时间
		DeviceJustNoticeIsclean   sql.NullInt64  `db:"device_just_notice_isclean"`   // *车机端立即保养提醒信息是否清除
		DeviceJustNoticeCleantime sql.NullInt64  `db:"device_just_notice_cleantime"` // *车机端立即保养提醒信息清除时间
		AppJustIsnotice           sql.NullInt64  `db:"app_just_isnotice"`            // app是否已经提醒过
		AppJustNoticeIsclean      int64          `db:"app_just_notice_isclean"`      // APP端立即保养提醒信息是否清除，1为已清除，2为未清除，默认为2
		AppJustNoticeCleantime    sql.NullInt64  `db:"app_just_notice_cleantime"`    // 清除app提醒时间戳
		MaintainOrderNo           sql.NullString `db:"maintain_order_no"`            // 保养单号
		UserId                    int64          `db:"user_id"`                      // 车主用户，user_id，通过APP成功清除保养提醒的登录账号
		Vin                       sql.NullString `db:"vin"`                          // 车架号
		DeviceSn                  sql.NullString `db:"device_sn"`                    // 设备仪表SN号
		C200                      sql.NullString `db:"c200"`                         // *c200
		ControllerSn              sql.NullString `db:"controller_sn"`                // *控制器SN
		EngineSn                  sql.NullString `db:"engine_sn"`                    // *电机型号
		ModelId                   sql.NullInt64  `db:"model_id"`                     // 车型型号: 本轮保养时针对的那款车辆型号
		ModelCode                 sql.NullString `db:"model_code"`                   // *车型编码
		OilName                   sql.NullString `db:"oil_name"`                     // 保养物料型号（比如机油）
		Created                   sql.NullInt64  `db:"created"`                      // 创建时间
		Updated                   sql.NullInt64  `db:"updated"`                      // 最后修改时间
		CreatedOperator           sql.NullInt64  `db:"created_operator"`             // 创建者ID
		UpdatedOperator           sql.NullInt64  `db:"updated_operator"`             // 最后修改者ID
		Remark                    sql.NullString `db:"remark"`                       // 备注
		BikeCleanMaintainMileages int64          `db:"bike_clean_maintain_mileages"` // 清除保养时公里数
		BikeOpenmotorMileages     int64          `db:"bike_openmotor_mileages"`      // 每次开启车子电门时车子公里数
		PlanMaintainOverDays      int64          `db:"plan_maintain_over_days"`      // 本轮保养周期内--剩余时间单位(天)
		PlanMaintainOverMileages  int64          `db:"plan_maintain_over_mileages"`  // 本轮保养周期内--剩余里程数(单位km)
		JustFirstCycle            int64          `db:"just_first_cycle"`             // 第一次立即保养周期时长
		JustNextCycle             int64          `db:"just_next_cycle"`              // 下一次立即保养周期时长
		JustFirstMileages         int64          `db:"just_first_mileages"`          // 第一次立即保养里程数,(单位km)
		JustNextMileages          int64          `db:"just_next_mileages"`           // 下一次立即保养里程数,(单位km)
		NearMileages              int64          `db:"near_mileages"`                // 临近保养里程数,(单位km)
		PlanMaintainCleantime     int64          `db:"plan_maintain_cleantime"`      // 本轮清除保养时间戳
		AppJustNoticeFirstTime    int64          `db:"app_just_notice_first_time"`   // app首次立即提醒时间戳
		AppJustNoticeLastTime     int64          `db:"app_just_notice_last_time"`    // app最后一次立即提醒时间戳
		AppJustNoticeCount        int64          `db:"app_just_notice_count"`        // app立即提醒总次数
		PlanCycleStatus           int64          `db:"plan_cycle_status"`            // 本轮是否在周期内: 1:在周期内（默认值）,2:未在周期内
	}
)

func newTBikeMaintainPlanCopy1Model(conn sqlx.SqlConn) *defaultTBikeMaintainPlanCopy1Model {
	return &defaultTBikeMaintainPlanCopy1Model{
		conn:  conn,
		table: `"public"."t_bike_maintain_plan_copy1"`,
	}
}

func (m *defaultTBikeMaintainPlanCopy1Model) Delete(ctx context.Context, planId int64) error {
	query := fmt.Sprintf("delete from %s where plan_id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, planId)
	return err
}

func (m *defaultTBikeMaintainPlanCopy1Model) FindOne(ctx context.Context, planId int64) (*TBikeMaintainPlanCopy1, error) {
	query := fmt.Sprintf("select %s from %s where plan_id = $1 limit 1", tBikeMaintainPlanCopy1Rows, m.table)
	var resp TBikeMaintainPlanCopy1
	err := m.conn.QueryRowCtx(ctx, &resp, query, planId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTBikeMaintainPlanCopy1Model) Insert(ctx context.Context, data *TBikeMaintainPlanCopy1) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44)", m.table, tBikeMaintainPlanCopy1RowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.PlanId, data.BikeId, data.PlanRound, data.PlanMaintainMileages, data.PlanMaintainTime, data.PlanMaintainCleanStatus, data.AppNearNoticeIs, data.AppNearNoticeTime, data.DeviceJustIsnotice, data.DeviceJustNoticeTime, data.DeviceJustNoticeIsclean, data.DeviceJustNoticeCleantime, data.AppJustIsnotice, data.AppJustNoticeIsclean, data.AppJustNoticeCleantime, data.MaintainOrderNo, data.UserId, data.Vin, data.DeviceSn, data.C200, data.ControllerSn, data.EngineSn, data.ModelId, data.ModelCode, data.OilName, data.Created, data.Updated, data.CreatedOperator, data.UpdatedOperator, data.Remark, data.BikeCleanMaintainMileages, data.BikeOpenmotorMileages, data.PlanMaintainOverDays, data.PlanMaintainOverMileages, data.JustFirstCycle, data.JustNextCycle, data.JustFirstMileages, data.JustNextMileages, data.NearMileages, data.PlanMaintainCleantime, data.AppJustNoticeFirstTime, data.AppJustNoticeLastTime, data.AppJustNoticeCount, data.PlanCycleStatus)
	return ret, err
}

func (m *defaultTBikeMaintainPlanCopy1Model) Update(ctx context.Context, data *TBikeMaintainPlanCopy1) error {
	query := fmt.Sprintf("update %s set %s where plan_id = $1", m.table, tBikeMaintainPlanCopy1RowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.PlanId, data.BikeId, data.PlanRound, data.PlanMaintainMileages, data.PlanMaintainTime, data.PlanMaintainCleanStatus, data.AppNearNoticeIs, data.AppNearNoticeTime, data.DeviceJustIsnotice, data.DeviceJustNoticeTime, data.DeviceJustNoticeIsclean, data.DeviceJustNoticeCleantime, data.AppJustIsnotice, data.AppJustNoticeIsclean, data.AppJustNoticeCleantime, data.MaintainOrderNo, data.UserId, data.Vin, data.DeviceSn, data.C200, data.ControllerSn, data.EngineSn, data.ModelId, data.ModelCode, data.OilName, data.Created, data.Updated, data.CreatedOperator, data.UpdatedOperator, data.Remark, data.BikeCleanMaintainMileages, data.BikeOpenmotorMileages, data.PlanMaintainOverDays, data.PlanMaintainOverMileages, data.JustFirstCycle, data.JustNextCycle, data.JustFirstMileages, data.JustNextMileages, data.NearMileages, data.PlanMaintainCleantime, data.AppJustNoticeFirstTime, data.AppJustNoticeLastTime, data.AppJustNoticeCount, data.PlanCycleStatus)
	return err
}

func (m *defaultTBikeMaintainPlanCopy1Model) tableName() string {
	return m.table
}
